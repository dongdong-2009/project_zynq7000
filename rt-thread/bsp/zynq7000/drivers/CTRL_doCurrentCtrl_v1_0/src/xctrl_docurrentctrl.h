// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XCTRL_DOCURRENTCTRL_H
#define XCTRL_DOCURRENTCTRL_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xctrl_docurrentctrl_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Busa_BaseAddress;
} XCtrl_docurrentctrl_Config;
#endif

typedef struct {
    u32 Busa_BaseAddress;
    u32 IsReady;
} XCtrl_docurrentctrl;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCtrl_docurrentctrl_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCtrl_docurrentctrl_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCtrl_docurrentctrl_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCtrl_docurrentctrl_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCtrl_docurrentctrl_Initialize(XCtrl_docurrentctrl *InstancePtr, u16 DeviceId);
XCtrl_docurrentctrl_Config* XCtrl_docurrentctrl_LookupConfig(u16 DeviceId);
int XCtrl_docurrentctrl_CfgInitialize(XCtrl_docurrentctrl *InstancePtr, XCtrl_docurrentctrl_Config *ConfigPtr);
#else
int XCtrl_docurrentctrl_Initialize(XCtrl_docurrentctrl *InstancePtr, const char* InstanceName);
int XCtrl_docurrentctrl_Release(XCtrl_docurrentctrl *InstancePtr);
#endif

void XCtrl_docurrentctrl_Start(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_IsDone(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_IsIdle(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_IsReady(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_EnableAutoRestart(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_DisableAutoRestart(XCtrl_docurrentctrl *InstancePtr);

void XCtrl_docurrentctrl_Set_in_f_iqref(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_iqref(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_idref(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_idref(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_udc(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_udc(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ttop(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ttop(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ia(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ia(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ib(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ib(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ic(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ic(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_theta(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_theta(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_kp_id(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_kp_id(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ki_id(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ki_id(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_id_pidmax(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_id_pidmax(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_id_pidmin(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_id_pidmin(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_kp_iq(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_kp_iq(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ki_iq(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ki_iq(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_iq_pidmax(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_iq_pidmax(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_iq_pidmin(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_iq_pidmin(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_ud(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_ud(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_uq(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_uq(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_Set_in_f_mod(XCtrl_docurrentctrl *InstancePtr, u32 Data);
u32 XCtrl_docurrentctrl_Get_in_f_mod(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_ta(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_ta_vld(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_tb(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_tb_vld(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_tc(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_tc_vld(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_ud_out(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_ud_out_vld(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_uq_out(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_Get_t_f_uq_out_vld(XCtrl_docurrentctrl *InstancePtr);

void XCtrl_docurrentctrl_InterruptGlobalEnable(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_InterruptGlobalDisable(XCtrl_docurrentctrl *InstancePtr);
void XCtrl_docurrentctrl_InterruptEnable(XCtrl_docurrentctrl *InstancePtr, u32 Mask);
void XCtrl_docurrentctrl_InterruptDisable(XCtrl_docurrentctrl *InstancePtr, u32 Mask);
void XCtrl_docurrentctrl_InterruptClear(XCtrl_docurrentctrl *InstancePtr, u32 Mask);
u32 XCtrl_docurrentctrl_InterruptGetEnabled(XCtrl_docurrentctrl *InstancePtr);
u32 XCtrl_docurrentctrl_InterruptGetStatus(XCtrl_docurrentctrl *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
